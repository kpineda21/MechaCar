r --version
clear
clearPushBack()
installed.packages("tidyverse")
install.packages("tidyverse")
source('C:/Users/anna/Desktop/Classwork/R_Analysis/Module 15 Challenge/MechaCarChallenge.R')
?READ()
?read()
?read.csv()
setwd("C:/Users/anna/Desktop/Classwork/R_Analysis/Module 15 Challenge")
mechacar_mpg <- read.csv(file="MechaCar_mpg.csv", checl.names=F, stringsAsFactors = F )
mechacar_mpg <- read.csv(file="MechaCar_mpg.csv", check.names=F, stringsAsFactors = F )
View(mechacar_mpg)
?lm()
lm(mpg ~ "vehicle weight",mechacar_mpg) #create linear model
lm(mpg ~ vehicle weight,mechacar_mpg) #create linear model
lm
lm(mpg ~ AWD,mechacar_mpg) #create linear model
summary
summary(lm(mpg~AWD,mechacar_mpg)) #summarize linear model
source('C:/Users/anna/Desktop/Classwork/R_Analysis/Module 15 Challenge/MechaCarChallenge.R')
save.image("C:/Users/anna/Desktop/Classwork/R_Analysis/Module 15 Challenge/challengetables.RData")
model <- lm(mpg ~ AWD,mechacar_mpg) #create linear model
yvals <- model$coefficients['AWD']*mechacar_mpg$AWD +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mechacar_mpg,aes(x=AWD,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
?plt()
plt <- ggplot(mechacar_mpg,aes(x=AWD,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
head(mpg)
?ggplot()
install.packages(ggplot)
?ggplot()
setwd("C:/Users/anna/Desktop/Classwork/R_Analysis/Module 15 Challenge")
?ggplot()
install.packages("jsonlite")
install.packages("tidyverse")
?ggplot()
?fromJSON()
source('C:/Users/anna/Desktop/Classwork/R_Analysis/Module 15 Challenge/MechaCarChallenge.R')
?sample()
?mutate()
library(tidyverse)
?mutate()
?gather()
?ggplot()
head(mpg)
head(mechacar_mpg)
plt <- ggplot(mechacar_mpg,aes(x=AWD,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
head(mechacar_mpg)
View(plt)
View(model)
View(mechacar_mpg)
View(model)
summary(lm(mpg~AWD,mechacar_mpg)) #summarize linear model
model <- lm(mpg ~ AWD,mechacar_mpg) #create linear model
yvals <- model$coefficients['AWD']*mechacar_mpg$AWD +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mechacar_mpg,aes(x=AWD,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
head(mechacar_mpg)
View(model)
View(plt)
source('C:/Users/anna/Desktop/Classwork/R_Analysis/Module 15 Challenge/MechaCarChallenge.R')
model <- lm(mpg ~ AWD,mechacar_mpg) #create linear model
yvals <- model$coefficients['AWD']*mechacar_mpg$AWD +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
head(mechacar_mpg)
plt <- ggplot(mechacar_mpg,aes(x=AWD,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
View(plt)
?geom_bar()
lm(mpg ~ vehicle_weight,mechacar_mpg) #create linear model
lm(mpg ~ vehicleweight,mechacar_mpg) #create linear model
lm(mpg ~ vehicle weight,mechacar_mpg) #create linear model
mechacar_mpg <- read.csv(file="MechaCar_mpg.csv", check.names=F, stringsAsFactors = F )
lm(mpg ~ vehicle weight,mechacar_mpg) #create linear model
View(mechacar_mpg)
mechacar_mpg
View(mechacar_mpg)
mechacar_mpg <- read.csv(file="MechaCar_mpg.csv", check.names=F, stringsAsFactors = F )
View(mechacar_mpg)
lm(mpg ~ AWD,mechacar_mpg) #create linear model
summary(lm(mpg~AWD,mechacar_mpg)) #summarize linear model
model <- lm(mpg ~ AWD,mechacar_mpg) #create linear model
yvals <- model$coefficients['AWD']*mechacar_mpg$AWD +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
head(mechacar_mpg)
plt <- ggplot(mechacar_mpg,aes(x=AWD,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
lm(mpg ~ vehicle weight,mechacar_mpg) #create linear model
lm(mpg ~ vehicle_weight,mechacar_mpg) #create linear model
summary(lm(mpg~vehicle_weight,mechacar_mpg)) #summarize linear model
lm(vehicle_weight ~ mpg,mechacar_mpg) #create linear model
summary
summary(lm(vehicle_weight~mpg,mechacar_mpg)) #summarize linear model
weight_mpg <- lm(vehicle_weight ~ mpg,mechacar_mpg) #create linear model
yvals <- model$coefficients['mpg']*mechacar_mpg$mpg +
model$coefficients['(Intercept)'] #determine y-axis values from linear mod
mechacar_mpg
mechacar_mpg
mechacar_mpg <- read.csv(file="MechaCar_mpg.csv", check.names=F, stringsAsFactors = F )
lm(mpg ~ AWD,mechacar_mpg) #create linear model
summary(lm(mpg~AWD,mechacar_mpg)) #summarize linear model
model <- lm(mpg ~ AWD,mechacar_mpg) #create linear model
yvals <- model$coefficients['AWD']*mechacar_mpg$AWD +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
head(mechacar_mpg)
plt <- ggplot(mechacar_mpg,aes(x=AWD,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
lm(vehicle_weight ~ mpg,mechacar_mpg) #create linear model
summary(lm(mpg ~ vehicle_weight,mechacar_mpg)) #summarize linear model
weight_mpg <- lm(mpg ~ vehicle_weight,mechacar_mpg) #create linear model
yval <- model$coefficients['vehicle_weight']*mechacar_mpg$vehicle_weight +
model$coefficients['(Intercept)'] #determine y-axis values from linear mod
plt <- ggplot(mechacar_mpg,aes(x=vehicle_weight,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yval), color = "red") #plot scatter and linear model
View(weight_mpg)
View(mechacar_mpg)
weight_mpg <- lm(mpg ~ vehicle_weight,mechacar_mpg) #create linear model
yval <- model$coefficients['vehicle_weight']*mechacar_mpg$vehicle_weight +
model$coefficients['(Intercept)'] #determine y-axis values from linear mod
plt <- ggplot(mechacar_mpg,aes(x=vehicle_weight,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yval), color = "red") #plot scatter and linear model
lm(mpg ~ AWD,mechacar_mpg) #create linear model
summary(lm(mpg~AWD,mechacar_mpg)) #summarize linear model
model <- lm(mpg ~ AWD,mechacar_mpg) #create linear model
yvals <- model$coefficients['AWD']*mechacar_mpg$AWD +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
head(mechacar_mpg)
plt <- ggplot(mechacar_mpg,aes(x=AWD,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
lm(vehicle_weight ~ mpg,mechacar_mpg) #create linear model
summary(lm(mpg ~ vehicle_weight,mechacar_mpg)) #summarize linear model
weight_mpg <- lm(mpg ~ vehicle_weight,mechacar_mpg) #create linear model
yval <- model$coefficients['vehicle_weight']*mechacar_mpg$vehicle_weight +
model$coefficients['(Intercept)'] #determine y-axis values from linear mod
plt <- ggplot(mechacar_mpg,aes(x=vehicle_weight,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yval), color = "red") #plot scatter and linear model
lm(mpg ~ vehicle_weight,mechacar_mpg) #create linear model
summary(lm(mpg ~ vehicle_weight,mechacar_mpg)) #summarize linear model
weight_mpg <- lm(mpg ~ vehicle_weight,mechacar_mpg) #create linear model
yval <- model$coefficients['vehicle_weight']*mechacar_mpg$vehicle_weight +
model$coefficients['(Intercept)'] #determine y-axis values from linear mod
plt <- ggplot(mechacar_mpg,aes(x=vehicle_weight,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yval), color = "red") #plot scatter and linear model
lm(mpg ~ vehicle_weight,mechacar_mpg) #create linear model
summary(lm(mpg~vehicle_weight,mechacar_mpg)) #summarize linear model
weight_mpg <- lm(mpg ~ vehicle_weight,mechacar_mpg) #create linear model
yval <- model$coefficients['vehicle_weight']*mechacar_mpg$vehicle_weight +
model$coefficients['(Intercept)'] #determine y-axis values from linear mod
plt <- ggplot(mechacar_mpg,aes(x=vehicle_weight,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yval), color = "red") #plot scatter and linear model
lm(mpg ~ vehicle_length,mechacar_mpg) #create linear model
summary(lm(mpg~vehicle_length,mechacar_mpg)) #summarize linear model
lm(mpg ~ vehicle_length,mechacar_mpg) #create linear model
summary(lm(mpg~vehicle_length,mechacar_mpg)) #summarize linear model
weight_mpg <- lm(mpg ~ vehicle_length,mechacar_mpg) #create linear model
yval <- model$coefficients['vehicle_length']*mechacar_mpg$vehicle_length +
model$coefficients['(Intercept)'] #determine y-axis values from linear mod
lm(mpg ~ vehicle_length,mechacar_mpg) #create linear model
summary(lm(mpg~vehicle_length,mechacar_mpg)) #summarize linear model
weight_mpg <- lm(mpg ~ vehicle_length,mechacar_mpg) #create linear model
yval1 <- model$coefficients['vehicle_length']*mechacar_mpg$vehicle_length +
model$coefficients['(Intercept)'] #determine y-axis values from linear mod
plt <- ggplot(mechacar_mpg,aes(x=vehicle_length,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yval1), color = "red") #plot scatter and linear model
#MPG and Ground_Clearance
lm(mpg ~ ground_clearance,mechacar_mpg) #create linear model
summary(lm(mpg~ground_clearance,mechacar_mpg)) #summarize linear model
weight_mpg <- lm(mpg ~ ground_clearance,mechacar_mpg) #create linear model
yval2 <- model$coefficients['ground_clearance']*mechacar_mpg$ground_clearance +
model$coefficients['(Intercept)'] #determine y-axis values from linear mod
plt <- ggplot(mechacar_mpg,aes(x=ground_clearance,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yval2), color = "red") #plot scatter and linear model
#MPG and Ground_Clearance
lm(ground_clearance ~ mpg,mechacar_mpg) #create linear model
summary(lm(ground_clearance~mpg,mechacar_mpg)) #summarize linear model
weight_mpg <- lm(ground_clearance ~ mpg,mechacar_mpg) #create linear model
yval2 <- model$coefficients['mpg']*mechacar_mpg$mpg +
model$coefficients['(Intercept)'] #determine y-axis values from linear mod
plt <- ggplot(mechacar_mpg,aes(x=mpg,y=ground_clearance)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yval2), color = "red") #plot scatter and linear model
#MPG and Ground_Clearance
lm(mpg ~ ground_clearance,mechacar_mpg) #create linear model
summary(lm(mpg~ground_clearance,mechacar_mpg)) #summarize linear model
weight_mpg <- lm(mpg ~ ground_clearance,mechacar_mpg) #create linear model
yval2 <- model$coefficients['ground_clearance']*mechacar_mpg$ground_clearance +
model$coefficients['(Intercept)'] #determine y-axis values from linear mod
plt <- ggplot(mechacar_mpg,aes(x=ground_clearance,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yval2), color = "red") #plot scatter and linear model
View(mechacar_mpg)
#MPG and Spoiler_Angle
lm(mpg ~ spoiler_angle,mechacar_mpg) #create linear model
summary(lm(mpg~spoiler_angle,mechacar_mpg)) #summarize linear model
#MPG and Ground_Clearance
lm(mpg ~ ground_clearance,mechacar_mpg) #create linear model
summary(lm(mpg~ground_clearance,mechacar_mpg)) #summarize linear model
weight_mpg <- lm(mpg ~ ground_clearance,mechacar_mpg) #create linear model
yval2 <- model$coefficients['ground_clearance']*mechacar_mpg$ground_clearance +
model$coefficients['(Intercept)'] #determine y-axis values from linear mod
plt <- ggplot(mechacar_mpg,aes(x=ground_clearance,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yval2), color = "red") #plot scatter and linear model
#MPG and Spoiler_Angle
lm(mpg ~ spoiler_angle,mechacar_mpg) #create linear model
summary(lm(mpg~spoiler_angle,mechacar_mpg)) #summarize linear model
weight_mpg <- lm(mpg ~ spoiler_angle,mechacar_mpg) #create linear model
yval3 <- model$coefficients['spoiler_angle']*mechacar_mpg$spoiler_angle +
model$coefficients['(Intercept)'] #determine y-axis values from linear mod
plt <- ggplot(mechacar_mpg,aes(x=spoiler_angle,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yval3), color = "red") #plot scatter and linear model
View(mechacar_mpg)
View(mechacar_mpg)
View(model)
View(plt)
View(weight_mpg)
View(mechacar_mpg)
#MPG and AWD
lm(mpg ~ AWD,mechacar_mpg) #create linear model
summary(lm(mpg~AWD,mechacar_mpg)) #summarize linear model
model <- lm(mpg ~ AWD,mechacar_mpg) #create linear model
yvals <- model$coefficients['AWD']*mechacar_mpg$AWD +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
head(mechacar_mpg)
plt <- ggplot(mechacar_mpg,aes(x=AWD,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
View(mechacar_mpg)
View(mechacar_mpg)
suspension_coil <- read.csv(file="Suspension_Coil.csv", check.names=F, stringsAsFactors = F )
View(suspension_coil)
?mean()
?median()
suspension_coil <- read.csv(file="Suspension_Coil.csv", check.names=F, stringsAsFactors = F )
median(PSI)
median(1:150)
median(1:10)
median(c(susension_coil))
median(c(suspension_coil))
median(suspension_coil, "PSI")
median(suspension_coil$PSI, na.rm=T)
mean(suspension_coil$PSI, na.rm=T)
median(suspension_coil$PSI, na.rm=T)
mean(suspension_coil$PSI, na.rm=T)
variance(suspension_coil$PSI, na.rm=T)
sd(suspension_coil$PSI, na.rm=T)
var(suspension_coil$PSI, na.rm=T)
mecha_data <- read.csv("MechaCar_mpg.csv",stringsAsFactors = F,check.names = F)
mecha_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data)
summary(mecha_lm)
View(mecha_data)
mecha_data <- read.csv("MechaCar_mpg.csv",stringsAsFactors = F,check.names = F)
mecha_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data)
summary(mecha_lm)
model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data) #create linear model
yvals <- model$coefficients['vehicle_length', 'vehicle_weight', 'spolier_angle', 'ground_clearance', 'AWD']*mechacar_mpg +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
#MPG and AWD
lm(mpg ~ AWD,mechacar_mpg) #create linear model
mecha_data <- read.csv("MechaCar_mpg.csv",stringsAsFactors = F,check.names = F)
mecha_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data)
summary(mecha_lm)
model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data) #create linear model
yvals <- model$coefficients['vehicle_length', 'vehicle_weight', 'spolier_angle', 'ground_clearance', 'AWD']*mechacar_mpg +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
summary(mecha_lm)
model <- (mecha_lm) #create linear model
yvals <- model$coefficients['vehicle_length', 'vehicle_weight', 'spolier_angle', 'ground_clearance', 'AWD']*mechacar_mpg +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
model <- (mecha_lm) #create linear model
yvals <- model$coefficients['vehicle_length', 'vehicle_weight', 'spolier_angle', 'ground_clearance', 'AWD']*mechacar_mpg$vehicle_length +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
#MPG and AWD
lm(mpg ~ AWD,mechacar_mpg) #create linear model
yvals <- model$coefficients['vehicle_length', 'vehicle_weight', 'spolier_angle', 'ground_clearance', 'AWD']*mechacar_mpg$vehicle_length +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
model <- (mecha_lm) #create linear model
yvals <- model$coefficients[vehicle_length + vehicle_weight + spolier_angle + ground_clearance + AWD]*mechacar_mpg$vehicle_length +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
View(mecha_data)
model <- (mecha_lm) #create linear model
yvals <- model$coefficients[vehicle_length + vehicle_weight + spolier_angle + ground_clearance + AWD]*mechacar_mpg +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
View(mecha_data)
mecha_data <- read.csv("MechaCar_mpg.csv",stringsAsFactors = F,check.names = F)
mecha_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data)
summary(mecha_lm)
model <- (mecha_lm) #create linear model
yvals <- model$coefficients[vehicle_length]*mechacar_mpg$vehicle_length +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
mecha_data <- read.csv("MechaCar_mpg.csv",stringsAsFactors = F,check.names = F)
mecha_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data)
summary(mecha_lm)
model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data) #create linear model
yvals <- model$coefficients[vehicle_length]*mechacar_mpg$vehicle_length +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
mecha_data <- read.csv("MechaCar_mpg.csv",stringsAsFactors = F,check.names = F)
mecha_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data)
summary(mecha_lm)
model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data) #create linear model
yvals <- model$coefficients['vehicle_length']*mechacar_mpg$vehicle_length +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
mecha_data <- read.csv("MechaCar_mpg.csv",stringsAsFactors = F,check.names = F)
mecha_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data)
summary(mecha_lm)
model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data) #create linear model
yvals <- model$coefficients['vehicle_length']*mechacar_mpg$vehicle_length +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mecha_data,aes(x=vehicle_length,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
View(mecha_data)
mecha_data <- read.csv("MechaCar_mpg.csv",stringsAsFactors = F,check.names = F)
mecha_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data)
summary(mecha_lm)
#vehicle_length
model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data) #create linear model
yvals <- model$coefficients['vehicle_length']*mechacar_mpg$vehicle_length +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mecha_data,aes(x=vehicle_length,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
#vehicle_weight
model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data) #create linear model
yval <- model$coefficients['vehicle_weight']*mechacar_mpg$vehicle_weight +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mecha_data,aes(x=vehicle_length,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
#spoiler_angle
model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data) #create linear model
yval1 <- model$coefficients['spoiler_angle']*mechacar_mpg$spoiler_angle +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mecha_data,aes(x=vehicle_length,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
mecha_data <- read.csv("MechaCar_mpg.csv",stringsAsFactors = F,check.names = F)
mecha_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data)
summary(mecha_lm)
#vehicle_length
model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data) #create linear model
yvals <- model$coefficients['vehicle_length']*mechacar_mpg$vehicle_length +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mecha_data,aes(x=vehicle_length,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
#vehicle_weight
model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data) #create linear model
yval <- model$coefficients['vehicle_weight']*mechacar_mpg$vehicle_weight +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mecha_data,aes(x=vehicle_weight,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
#spoiler_angle
model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data) #create linear model
yval1 <- model$coefficients['spoiler_angle']*mechacar_mpg$spoiler_angle +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mecha_data,aes(x=spoiler_angle,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
#ground_clearance
model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data) #create linear model
yval2 <- model$coefficients['ground_clearance']*mechacar_mpg$ground_clearance +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mecha_data,aes(x=ground_clearance,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
#AWD
model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data) #create linear model
yval3 <- model$coefficients['AWD']*mechacar_mpg$AWD +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mecha_data,aes(x=AWD,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
save.image("C:/Users/anna/Desktop/Classwork/R_Analysis/Module 15 Challenge/challengetables.RData")
suspension_coil <- read.csv(file="Suspension_Coil.csv", check.names=F, stringsAsFactors = F )
median(suspension_coil$PSI, na.rm=T)
mean(suspension_coil$PSI, na.rm=T)
sd(suspension_coil$PSI, na.rm=T)
var(suspension_coil$PSI, na.rm=T)
?t.test()
View(mecha_data)
##SuspensionCoil T-Test
t.test(log10(suspension_coil$PSI))
##SuspensionCoil T-Test
sample_table <- suspension_coil %>% sample_n(10) #generate 10 random sampled data points
sample_table2 <- suspension_coil %>% sample_n(10) # generate another 10 random sampled data points
t.test(log10(sample_table$PIS), log10 (sample_table2$PSI)) #compare means of two samples
##SuspensionCoil T-Test
sample_table <- suspension_coil %>% sample_n(10) #generate 10 random sampled data points
sample_table2 <- suspension_coil %>% sample_n(10) # generate another 10 random sampled data points
t.test(log10(sample_table$PSI), log10 (sample_table2$PSI)) #compare means of two samples
mecha_data <- read.csv("MechaCar_mpg.csv",stringsAsFactors = F,check.names = F)
mecha_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data)
summary(mecha_lm)
#vehicle_length
model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data) #create linear model
yvals <- model$coefficients['vehicle_length']*mechacar_mpg$vehicle_length +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mecha_data,aes(x=vehicle_length,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
#vehicle_weight
model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data) #create linear model
yval <- model$coefficients['vehicle_weight']*mechacar_mpg$vehicle_weight +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mecha_data,aes(x=vehicle_weight,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
#spoiler_angle
model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data) #create linear model
yval1 <- model$coefficients['spoiler_angle']*mechacar_mpg$spoiler_angle +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mecha_data,aes(x=spoiler_angle,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
#ground_clearance
model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data) #create linear model
yval2 <- model$coefficients['ground_clearance']*mechacar_mpg$ground_clearance +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mecha_data,aes(x=ground_clearance,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
#AWD
model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data) #create linear model
yval3 <- model$coefficients['AWD']*mechacar_mpg$AWD +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mecha_data,aes(x=AWD,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
View(mecha_lm)
View(mechacar_mpg)
mecha_data <- read.csv("MechaCar_mpg.csv",stringsAsFactors = F,check.names = F)
mecha_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data)
summary(mecha_lm)
#vehicle_length
model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_data) #create linear model
yvals <- model$coefficients['vehicle_length']*mechacar_mpg$vehicle_length +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mecha_data,aes(x=vehicle_length,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
View(mechacar_mpg)
View(mecha_lm)
View(mechacar_mpg)
View(model)
View(mechacar_mpg)
save.image("C:/Users/anna/Desktop/Classwork/R_Analysis/Module 15 Challenge/challengetables.RData")
View(suspension_coil)
View(mechacar_mpg)
